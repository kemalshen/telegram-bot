from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import logging
from database import DatabaseManager
from post_formatter import PostFormatter
from config import COLUMNS

logger = logging.getLogger(__name__)

class CarPublishingStates(StatesGroup):
    waiting_for_brand = State()
    waiting_for_model = State()
    waiting_for_year = State()
    waiting_for_price = State()
    waiting_for_city = State()
    waiting_for_photo = State()
    waiting_for_phone = State()
    waiting_for_telegram = State()
    waiting_for_bank_link = State()
    confirmation = State()

class CarPublisher:
    def __init__(self, bot: Bot, dp: Dispatcher, db: DatabaseManager):
        self.bot = bot
        self.dp = dp
        self.db = db
        self._setup_handlers()
    
    def _setup_handlers(self):
        """Setup all publishing handlers"""
        self.dp.register_message_handler(self.start_publishing, commands=['publish'])
        self.dp.register_message_handler(self.handle_brand, state=CarPublishingStates.waiting_for_brand)
        self.dp.register_message_handler(self.handle_model, state=CarPublishingStates.waiting_for_model)
        self.dp.register_message_handler(self.handle_year, state=CarPublishingStates.waiting_for_year)
        self.dp.register_message_handler(self.handle_price, state=CarPublishingStates.waiting_for_price)
        self.dp.register_message_handler(self.handle_city, state=CarPublishingStates.waiting_for_city)
        self.dp.register_message_handler(self.handle_photo, state=CarPublishingStates.waiting_for_photo)
        self.dp.register_message_handler(self.handle_phone, state=CarPublishingStates.waiting_for_phone)
        self.dp.register_message_handler(self.handle_telegram, state=CarPublishingStates.waiting_for_telegram)
        self.dp.register_message_handler(self.handle_bank_link, state=CarPublishingStates.waiting_for_bank_link)
        self.dp.register_message_handler(self.handle_confirmation, state=CarPublishingStates.confirmation)
        self.dp.register_callback_query_handler(self.confirm_car, lambda c: c.data.startswith('confirm_'))
        self.dp.register_callback_query_handler(self.cancel_publishing, lambda c: c.data == 'cancel_publishing')
    
    async def start_publishing(self, message: types.Message):
        """Start the car publishing process"""
        await message.reply(
            "üöó <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è</b>\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n"
            "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: Chevrolet, Daewoo):",
            parse_mode="HTML"
        )
        await CarPublishingStates.waiting_for_brand.set()
    
    async def handle_brand(self, message: types.Message, state: FSMContext):
        """Handle brand input"""
        brand = message.text.strip()
        if len(brand) < 2:
            await message.reply("‚ùå –ú–∞—Ä–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        await state.update_data(brand=brand)
        
        # Get existing models for this brand
        existing_models = self.db.get_unique_values(COLUMNS['MODEL'])
        brand_models = [model for model in existing_models if brand.lower() in model.lower()]
        
        if brand_models:
            kb = InlineKeyboardMarkup(row_width=2)
            for model in brand_models[:6]:  # Limit to 6 buttons
                kb.insert(InlineKeyboardButton(model, callback_data=f"model_{model}"))
            kb.add(InlineKeyboardButton("–î—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å", callback_data="model_other"))
            
            await message.reply(
                f"üìù <b>–ú–∞—Ä–∫–∞:</b> {brand}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é:",
                reply_markup=kb,
                parse_mode="HTML"
            )
        else:
            await message.reply(
                f"üìù <b>–ú–∞—Ä–∫–∞:</b> {brand}\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:",
                parse_mode="HTML"
            )
        
        await CarPublishingStates.waiting_for_model.set()
    
    async def handle_model(self, message: types.Message, state: FSMContext):
        """Handle model input"""
        model = message.text.strip()
        if len(model) < 2:
            await message.reply("‚ùå –ú–æ–¥–µ–ª—å –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        await state.update_data(model=model)
        data = await state.get_data()
        
        await message.reply(
            f"üìù <b>–ú–∞—Ä–∫–∞:</b> {data['brand']}\n"
            f"üìù <b>–ú–æ–¥–µ–ª—å:</b> {model}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:",
            parse_mode="HTML"
        )
        await CarPublishingStates.waiting_for_year.set()
    
    async def handle_year(self, message: types.Message, state: FSMContext):
        """Handle year input"""
        year = message.text.strip()
        try:
            year_int = int(year)
            if year_int < 1900 or year_int > 2024:
                await message.reply("‚ùå –ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 1900 –∏ 2024. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
        except ValueError:
            await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2020):")
            return
        
        await state.update_data(year=year)
        data = await state.get_data()
        
        await message.reply(
            f"üìù <b>–ú–∞—Ä–∫–∞:</b> {data['brand']}\n"
            f"üìù <b>–ú–æ–¥–µ–ª—å:</b> {data['model']}\n"
            f"üìù <b>–ì–æ–¥:</b> {year}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 150 –º–ª–Ω):",
            parse_mode="HTML"
        )
        await CarPublishingStates.waiting_for_price.set()
    
    async def handle_price(self, message: types.Message, state: FSMContext):
        """Handle price input"""
        price = message.text.strip()
        if not price:
            await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
            return
        
        await state.update_data(price=price)
        data = await state.get_data()
        
        # Get existing cities
        cities = self.db.get_unique_values(COLUMNS['CITY'])
        
        kb = InlineKeyboardMarkup(row_width=2)
        for city in cities[:6]:  # Limit to 6 buttons
            kb.insert(InlineKeyboardButton(city, callback_data=f"city_{city}"))
        kb.add(InlineKeyboardButton("–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", callback_data="city_other"))
        
        await message.reply(
            f"üìù <b>–ú–∞—Ä–∫–∞:</b> {data['brand']}\n"
            f"üìù <b>–ú–æ–¥–µ–ª—å:</b> {data['model']}\n"
            f"üìù <b>–ì–æ–¥:</b> {data['year']}\n"
            f"üìù <b>–¶–µ–Ω–∞:</b> {price}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π:",
            reply_markup=kb,
            parse_mode="HTML"
        )
        await CarPublishingStates.waiting_for_city.set()
    
    async def handle_city(self, message: types.Message, state: FSMContext):
        """Handle city input"""
        city = message.text.strip()
        if len(city) < 2:
            await message.reply("‚ùå –ì–æ—Ä–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        await state.update_data(city=city)
        data = await state.get_data()
        
        await message.reply(
            f"üìù <b>–ú–∞—Ä–∫–∞:</b> {data['brand']}\n"
            f"üìù <b>–ú–æ–¥–µ–ª—å:</b> {data['model']}\n"
            f"üìù <b>–ì–æ–¥:</b> {data['year']}\n"
            f"üìù <b>–¶–µ–Ω–∞:</b> {data['price']}\n"
            f"üìù <b>–ì–æ—Ä–æ–¥:</b> {city}\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:",
            parse_mode="HTML"
        )
        await CarPublishingStates.waiting_for_photo.set()
    
    async def handle_photo(self, message: types.Message, state: FSMContext):
        """Handle photo URL input"""
        photo_url = message.text.strip()
        if not photo_url.startswith(('http://', 'https://')):
            await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ (–Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å http:// –∏–ª–∏ https://):")
            return
        
        await state.update_data(photo_url=photo_url)
        data = await state.get_data()
        
        await message.reply(
            f"üìù <b>–ú–∞—Ä–∫–∞:</b> {data['brand']}\n"
            f"üìù <b>–ú–æ–¥–µ–ª—å:</b> {data['model']}\n"
            f"üìù <b>–ì–æ–¥:</b> {data['year']}\n"
            f"üìù <b>–¶–µ–Ω–∞:</b> {data['price']}\n"
            f"üìù <b>–ì–æ—Ä–æ–¥:</b> {data['city']}\n"
            f"üìù <b>–§–æ—Ç–æ:</b> ‚úÖ\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:",
            parse_mode="HTML"
        )
        await CarPublishingStates.waiting_for_phone.set()
    
    async def handle_phone(self, message: types.Message, state: FSMContext):
        """Handle phone input"""
        phone = message.text.strip()
        if not phone.startswith('+998'):
            await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +998XXXXXXXXX:")
            return
        
        await state.update_data(phone=phone)
        data = await state.get_data()
        
        await message.reply(
            f"üìù <b>–ú–∞—Ä–∫–∞:</b> {data['brand']}\n"
            f"üìù <b>–ú–æ–¥–µ–ª—å:</b> {data['model']}\n"
            f"üìù <b>–ì–æ–¥:</b> {data['year']}\n"
            f"üìù <b>–¶–µ–Ω–∞:</b> {data['price']}\n"
            f"üìù <b>–ì–æ—Ä–æ–¥:</b> {data['city']}\n"
            f"üìù <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ Telegram username (–±–µ–∑ @):",
            parse_mode="HTML"
        )
        await CarPublishingStates.waiting_for_telegram.set()
    
    async def handle_telegram(self, message: types.Message, state: FSMContext):
        """Handle Telegram username input"""
        telegram = message.text.strip().lstrip('@')
        if not telegram:
            await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ Telegram username:")
            return
        
        await state.update_data(telegram=telegram)
        data = await state.get_data()
        
        await message.reply(
            f"üìù <b>–ú–∞—Ä–∫–∞:</b> {data['brand']}\n"
            f"üìù <b>–ú–æ–¥–µ–ª—å:</b> {data['model']}\n"
            f"üìù <b>–ì–æ–¥:</b> {data['year']}\n"
            f"üìù <b>–¶–µ–Ω–∞:</b> {data['price']}\n"
            f"üìù <b>–ì–æ—Ä–æ–¥:</b> {data['city']}\n"
            f"üìù <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data['phone']}\n"
            f"üìù <b>Telegram:</b> @{telegram}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –±–∞–Ω–∫ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –µ—Å–ª–∏ –Ω–µ—Ç):",
            parse_mode="HTML"
        )
        await CarPublishingStates.waiting_for_bank_link.set()
    
    async def handle_bank_link(self, message: types.Message, state: FSMContext):
        """Handle bank link input"""
        bank_link = message.text.strip()
        if bank_link == '-':
            bank_link = ''
        elif bank_link and not bank_link.startswith(('http://', 'https://')):
            await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É (–Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å http:// –∏–ª–∏ https://) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-':")
            return
        
        await state.update_data(bank_link=bank_link)
        data = await state.get_data()
        
        # Show confirmation
        confirmation_text = (
            f"üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:</b>\n\n"
            f"üöó <b>–ú–∞—Ä–∫–∞:</b> {data['brand']}\n"
            f"üöó <b>–ú–æ–¥–µ–ª—å:</b> {data['model']}\n"
            f"üìÖ <b>–ì–æ–¥:</b> {data['year']}\n"
            f"üí∞ <b>–¶–µ–Ω–∞:</b> {data['price']}\n"
            f"üìç <b>–ì–æ—Ä–æ–¥:</b> {data['city']}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data['phone']}\n"
            f"üì± <b>Telegram:</b> @{data['telegram']}\n"
        )
        
        if bank_link:
            confirmation_text += f"üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –±–∞–Ω–∫:</b> {bank_link}\n"
        
        confirmation_text += "\n–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã?"
        
        kb = InlineKeyboardMarkup(row_width=2)
        kb.add(
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_yes"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_publishing")
        )
        
        await message.reply(confirmation_text, reply_markup=kb, parse_mode="HTML")
        await CarPublishingStates.confirmation.set()
    
    async def confirm_car(self, callback_query: types.CallbackQuery, state: FSMContext):
        """Handle car confirmation"""
        if callback_query.data == "confirm_yes":
            data = await state.get_data()
            
            # Add car to database
            success = self.db.add_car(data)
            
            if success:
                await callback_query.message.edit_text(
                    "‚úÖ <b>–ê–≤—Ç–æ–º–æ–±–∏–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!</b>\n\n"
                    "–ê–≤—Ç–æ–º–æ–±–∏–ª—å –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                    parse_mode="HTML"
                )
            else:
                await callback_query.message.edit_text(
                    "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è</b>\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    parse_mode="HTML"
                )
        else:
            await callback_query.message.edit_text(
                "‚ùå <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ</b>",
                parse_mode="HTML"
            )
        
        await state.finish()
    
    async def cancel_publishing(self, callback_query: types.CallbackQuery, state: FSMContext):
        """Cancel the publishing process"""
        await callback_query.message.edit_text(
            "‚ùå <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ</b>",
            parse_mode="HTML"
        )
        await state.finish() 