import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
import os

from config import BOT_TOKEN, CHANNEL_USERNAME, LOGGING_CONFIG
from simple_database import SimpleDatabaseManager
from post_formatter import PostFormatter

# Setup logging
logging.basicConfig(
    level=getattr(logging, LOGGING_CONFIG['level']),
    format=LOGGING_CONFIG['format']
)
logger = logging.getLogger(__name__)

# Initialize bot and dispatcher
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# Initialize database
db = SimpleDatabaseManager()

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    """Welcome message and main menu"""
    welcome_text = (
        "üöó <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ZalogAvtoUz Bot!</b>\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞–ª–æ–≥–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏.\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "üîç /find ‚Äî –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º\n"
        "üìù /publish ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å\n"
        "üìä /stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n"
        "üìã /help ‚Äî —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –∞–≤—Ç–æ", callback_data="action_find"),
        InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ", callback_data="action_publish")
    )
    kb.add(
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="action_stats"),
        InlineKeyboardButton("üìã –ü–æ–º–æ—â—å", callback_data="action_help")
    )
    
    await message.reply(welcome_text, reply_markup=kb, parse_mode="HTML")

@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    """Help command"""
    help_text = (
        "üìã <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</b>\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "üîç /find ‚Äî –ø–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ –º–∞—Ä–∫–µ, –º–æ–¥–µ–ª–∏, –≥–æ–¥—É, –≥–æ—Ä–æ–¥—É –∏ —Ü–µ–Ω–µ\n"
        "üìù /publish ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n"
        "üìä /stats ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n"
        "üìã /help ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
        "1. –î–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /find –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º\n"
        "2. –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /publish\n"
        "3. –í—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ\n\n"
        "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )
    
    await message.reply(help_text, parse_mode="HTML")

@dp.message_handler(commands=['stats'])
async def stats_command(message: types.Message):
    """Show database statistics"""
    try:
        cars = db.get_all_cars()
        brands = db.get_unique_values('–ú–∞—Ä–∫–∞')
        cities = db.get_unique_values('–ì–æ—Ä–æ–¥')
        
        stats_text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
            f"üöó <b>–í—Å–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:</b> {len(cars)}\n"
            f"üè≠ <b>–ú–∞—Ä–æ–∫:</b> {len(brands)}\n"
            f"üèôÔ∏è <b>–ì–æ—Ä–æ–¥–æ–≤:</b> {len(cities)}\n\n"
            f"<b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–∞—Ä–∫–∏:</b>\n"
        )
        
        # Count brands
        brand_counts = {}
        for car in cars:
            brand = car.get('–ú–∞—Ä–∫–∞', '')
            if brand:
                brand_counts[brand] = brand_counts.get(brand, 0) + 1
        
        # Show top 5 brands
        top_brands = sorted(brand_counts.items(), key=lambda x: x[1], reverse=True)[:5]
        for brand, count in top_brands:
            stats_text += f"‚Ä¢ {brand}: {count} –∞–≤—Ç–æ\n"
        
        await message.reply(stats_text, parse_mode="HTML")
    except Exception as e:
        logger.error(f"Error getting stats: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@dp.message_handler(commands=['find'])
async def find_command(message: types.Message):
    """Start the search process"""
    await start_search(message)

async def start_search(message: types.Message):
    """Start the search process with brand selection"""
    brands = db.get_unique_values('–ú–∞—Ä–∫–∞')
    
    kb = InlineKeyboardMarkup(row_width=2)
    for brand in brands[:8]:  # Limit to 8 buttons
        kb.insert(InlineKeyboardButton(brand, callback_data=f"search_brand_{brand}"))
    kb.add(InlineKeyboardButton("–í—Å–µ –º–∞—Ä–∫–∏", callback_data="search_brand_all"))
    
    await message.reply(
        "üîç <b>–ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è:",
        reply_markup=kb,
        parse_mode="HTML"
    )

@dp.callback_query_handler(lambda c: c.data.startswith("search_brand_"))
async def handle_search_brand(callback_query: types.CallbackQuery):
    """Handle brand selection in search"""
    brand = callback_query.data.replace("search_brand_", "")
    
    if brand == "all":
        models = db.get_unique_values('–ú–æ–¥–µ–ª—å')
    else:
        # Get models for this brand
        cars = db.get_cars_by_filters({'brand': brand})
        models = list(set(car.get('–ú–æ–¥–µ–ª—å', '') for car in cars if car.get('–ú–æ–¥–µ–ª—å')))
    
    kb = InlineKeyboardMarkup(row_width=2)
    for model in models[:8]:
        kb.insert(InlineKeyboardButton(model, callback_data=f"search_model_{brand}_{model}"))
    kb.add(InlineKeyboardButton("–í—Å–µ –º–æ–¥–µ–ª–∏", callback_data=f"search_model_{brand}_all"))
    
    await callback_query.message.edit_text(
        f"üîç <b>–ü–æ–∏—Å–∫: {brand if brand != 'all' else '–í—Å–µ –º–∞—Ä–∫–∏'}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:",
        reply_markup=kb,
        parse_mode="HTML"
    )

@dp.callback_query_handler(lambda c: c.data.startswith("search_model_"))
async def handle_search_model(callback_query: types.CallbackQuery):
    """Handle model selection in search"""
    _, brand, model = callback_query.data.split("_", 2)
    
    # Get years
    cars = db.get_cars_by_filters({'brand': brand, 'model': model})
    years = list(set(str(car.get('–ì–æ–¥', '')) for car in cars if car.get('–ì–æ–¥')))
    years.sort()
    
    kb = InlineKeyboardMarkup(row_width=3)
    for year in years[:9]:
        kb.insert(InlineKeyboardButton(year, callback_data=f"search_year_{brand}_{model}_{year}"))
    kb.add(InlineKeyboardButton("–í—Å–µ –≥–æ–¥—ã", callback_data=f"search_year_{brand}_{model}_all"))
    
    await callback_query.message.edit_text(
        f"üîç <b>–ü–æ–∏—Å–∫: {brand} {model}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥:",
        reply_markup=kb,
        parse_mode="HTML"
    )

@dp.callback_query_handler(lambda c: c.data.startswith("search_year_"))
async def handle_search_year(callback_query: types.CallbackQuery):
    """Handle year selection in search"""
    _, brand, model, year = callback_query.data.split("_", 3)
    
    # Get cities
    cars = db.get_cars_by_filters({'brand': brand, 'model': model, 'year': year})
    cities = list(set(car.get('–ì–æ—Ä–æ–¥', '') for car in cars if car.get('–ì–æ—Ä–æ–¥')))
    cities.sort()
    
    kb = InlineKeyboardMarkup(row_width=2)
    for city in cities[:6]:
        kb.insert(InlineKeyboardButton(city, callback_data=f"search_city_{brand}_{model}_{year}_{city}"))
    kb.add(InlineKeyboardButton("–í—Å–µ –≥–æ—Ä–æ–¥–∞", callback_data=f"search_city_{brand}_{model}_{year}_all"))
    
    await callback_query.message.edit_text(
        f"üîç <b>–ü–æ–∏—Å–∫: {brand} {model} {year}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
        reply_markup=kb,
        parse_mode="HTML"
    )

@dp.callback_query_handler(lambda c: c.data.startswith("search_city_"))
async def handle_search_city(callback_query: types.CallbackQuery):
    """Handle city selection in search"""
    _, brand, model, year, city = callback_query.data.split("_", 4)
    
    # Get price ranges
    kb = InlineKeyboardMarkup(row_width=2)
    price_ranges = [
        (0, 100_000_000, "–¥–æ 100 –º–ª–Ω"),
        (100_000_000, 150_000_000, "100-150 –º–ª–Ω"),
        (150_000_000, 200_000_000, "150-200 –º–ª–Ω"),
        (200_000_000, 300_000_000, "200-300 –º–ª–Ω"),
        (300_000_000, 500_000_000, "300-500 –º–ª–Ω"),
        (500_000_000, float('inf'), "–æ—Ç 500 –º–ª–Ω")
    ]
    
    for min_price, max_price, label in price_ranges:
        kb.insert(InlineKeyboardButton(
            label, 
            callback_data=f"search_price_{brand}_{model}_{year}_{city}_{max_price}"
        ))
    kb.add(InlineKeyboardButton("–õ—é–±–∞—è —Ü–µ–Ω–∞", callback_data=f"search_price_{brand}_{model}_{year}_{city}_all"))
    
    await callback_query.message.edit_text(
        f"üîç <b>–ü–æ–∏—Å–∫: {brand} {model} {year} {city}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω:",
        reply_markup=kb,
        parse_mode="HTML"
    )

@dp.callback_query_handler(lambda c: c.data.startswith("search_price_"))
async def handle_search_price(callback_query: types.CallbackQuery):
    """Handle price selection and show results"""
    _, brand, model, year, city, price = callback_query.data.split("_", 5)
    
    # Build filters
    filters = {
        'brand': brand,
        'model': model,
        'year': year,
        'city': city,
        'max_price': price
    }
    
    # Get filtered cars
    cars = db.get_cars_by_filters(filters)
    
    if not cars:
        await callback_query.message.edit_text(
            "‚ùå <b>–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.",
            parse_mode="HTML"
        )
        return
    
    # Show results
    results_text = PostFormatter.format_search_results(cars, filters)
    
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search"),
        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    await callback_query.message.edit_text(results_text, reply_markup=kb, parse_mode="HTML")

@dp.callback_query_handler(lambda c: c.data == "new_search")
async def new_search(callback_query: types.CallbackQuery):
    """Start a new search"""
    await start_search(callback_query.message)

@dp.callback_query_handler(lambda c: c.data == "main_menu")
async def main_menu(callback_query: types.CallbackQuery):
    """Return to main menu"""
    await start_command(callback_query.message)

@dp.callback_query_handler(lambda c: c.data.startswith("action_"))
async def handle_main_actions(callback_query: types.CallbackQuery):
    """Handle main menu actions"""
    action = callback_query.data.replace("action_", "")
    
    if action == "find":
        await start_search(callback_query.message)
    elif action == "publish":
        await callback_query.message.reply(
            "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è</b>\n\n"
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets.\n"
            "–ü–æ–∫–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /find –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.",
            parse_mode="HTML"
        )
    elif action == "stats":
        await stats_command(callback_query.message)
    elif action == "help":
        await help_command(callback_query.message)

@dp.message_handler(commands=['publish_all'])
async def publish_all_command(message: types.Message):
    """Publish all unpublished cars to channel"""
    try:
        unpublished_cars = db.get_unpublished_cars()
        
        if not unpublished_cars:
            await message.reply("‚úÖ –í—Å–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã!")
            return
        
        published_count = 0
        
        for car in unpublished_cars:
            try:
                # Format the post
                post_data = PostFormatter.format_car_post(car)
                
                # Send to channel
                await bot.send_photo(
                    chat_id=CHANNEL_USERNAME,
                    photo=post_data['photo_url'],
                    caption=post_data['text'],
                    reply_markup=post_data['buttons'],
                    parse_mode="HTML"
                )
                
                # Update status
                db.update_car_status(car['row_index'], '‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ')
                published_count += 1
                
                # Small delay to avoid rate limiting
                await asyncio.sleep(1)
                
            except Exception as e:
                logger.error(f"Error publishing car {car.get('–ú–∞—Ä–∫–∞', '')} {car.get('–ú–æ–¥–µ–ª—å', '')}: {e}")
                continue
        
        await message.reply(f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ {published_count} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ –∫–∞–Ω–∞–ª!")
        
    except Exception as e:
        logger.error(f"Error in publish_all: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")

if __name__ == '__main__':
    logger.info("Starting ZalogAvtoUz Bot (Simple Mode)...")
    executor.start_polling(dp, skip_updates=True) 