import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
API_TOKEN = "8162554421:AAHFrwOptRMM5oiFCUrkiiQAw2glMvvsZLw"
CHANNEL_USERNAME = "@zalogautouz"
GSHEET_CREDENTIALS_FILE = 'creds.json'
GSHEET_NAME = "ZalogAvtoUz"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

# === Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ===
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(GSHEET_CREDENTIALS_FILE, scope)
client = gspread.authorize(creds)
sheet = client.open(GSHEET_NAME).sheet1

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await message.reply("\U0001F44B –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–ª–æ–≥–æ–≤—ã—Ö –∞–≤—Ç–æ.\n\n–ö–æ–º–∞–Ω–¥—ã:\n\U0001F50D /find ‚Äî –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º\n\U0001F4E3 /publish ‚Äî –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤—Å–µ –≤ –∫–∞–Ω–∞–ª")

# === –ö–æ–º–∞–Ω–¥–∞ /find ‚Äî —à–∞–≥ 1: –≤—ã–±–æ—Ä –º–∞—Ä–∫–∏ ===
@dp.message_handler(commands=['find'])
async def find_cars(message: types.Message):
    rows = sheet.get_all_records()
    brands = sorted(set(row['–ú–∞—Ä–∫–∞'].strip() for row in rows if row['–°—Ç–∞—Ç—É—Å'] != ''))
    kb = InlineKeyboardMarkup(row_width=2)
    for brand in brands:
        kb.insert(InlineKeyboardButton(brand, callback_data=f"brand_{brand}"))
    kb.add(InlineKeyboardButton("–ù–µ–≤–∞–∂–Ω–æ", callback_data="brand_all"))
    await message.reply("–í—ã–±–µ—Ä–∏ –º–∞—Ä–∫—É –∞–≤—Ç–æ:", reply_markup=kb)

# === –®–∞–≥ 2 ‚Äî –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ ===
@dp.callback_query_handler(lambda c: c.data.startswith("brand_"))
async def select_model(callback: types.CallbackQuery):
    selected_brand = callback.data[6:]
    rows = sheet.get_all_records()
    if selected_brand == "all":
        models = sorted(set(row['–ú–æ–¥–µ–ª—å'].strip() for row in rows if row['–°—Ç–∞—Ç—É—Å'] != ''))
    else:
        models = sorted(set(row['–ú–æ–¥–µ–ª—å'].strip() for row in rows if row['–ú–∞—Ä–∫–∞'] == selected_brand and row['–°—Ç–∞—Ç—É—Å'] != ''))
    kb = InlineKeyboardMarkup(row_width=2)
    for model in models:
        kb.insert(InlineKeyboardButton(model, callback_data=f"model_{selected_brand}_{model}"))
    kb.add(InlineKeyboardButton("–ù–µ–≤–∞–∂–Ω–æ", callback_data=f"model_{selected_brand}_all"))
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å:", reply_markup=kb)

# === –®–∞–≥ 3 ‚Äî –≤—ã–±–æ—Ä –≥–æ–¥–∞ ===
@dp.callback_query_handler(lambda c: c.data.startswith("model_"))
async def select_year(callback: types.CallbackQuery):
    _, brand, model = callback.data.split("_", 2)
    rows = sheet.get_all_records()
    years = sorted(set(str(row['–ì–æ–¥']).strip() for row in rows if row['–°—Ç–∞—Ç—É—Å'] != ''))
    kb = InlineKeyboardMarkup(row_width=2)
    for year in years:
        kb.insert(InlineKeyboardButton(year, callback_data=f"year_{brand}_{model}_{year}"))
    kb.add(InlineKeyboardButton("–ù–µ–≤–∞–∂–Ω–æ", callback_data=f"year_{brand}_{model}_all"))
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞:", reply_markup=kb)

# === –®–∞–≥ 4 ‚Äî –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ ===
@dp.callback_query_handler(lambda c: c.data.startswith("year_"))
async def select_city(callback: types.CallbackQuery):
    _, brand, model, year = callback.data.split("_", 3)
    rows = sheet.get_all_records()
    cities = sorted(set(row['–ì–æ—Ä–æ–¥'].strip() for row in rows if row['–°—Ç–∞—Ç—É—Å'] != ''))
    kb = InlineKeyboardMarkup(row_width=2)
    for city in cities:
        kb.insert(InlineKeyboardButton(city, callback_data=f"city_{brand}_{model}_{year}_{city}"))
    kb.add(InlineKeyboardButton("–ù–µ–≤–∞–∂–Ω–æ", callback_data=f"city_{brand}_{model}_{year}_all"))
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥:", reply_markup=kb)

# === –®–∞–≥ 5 ‚Äî –≤—ã–±–æ—Ä —Ü–µ–Ω—ã ===
@dp.callback_query_handler(lambda c: c.data.startswith("city_"))
async def select_price(callback: types.CallbackQuery):
    _, brand, model, year, city = callback.data.split("_", 4)
    kb = InlineKeyboardMarkup(row_width=2)
    for limit in [100_000_000, 150_000_000, 200_000_000, 300_000_000, 500_000_000]:
        kb.insert(InlineKeyboardButton(f"–¥–æ {limit} —Å—É–º", callback_data=f"price_{brand}_{model}_{year}_{city}_{limit}"))
    kb.add(InlineKeyboardButton("–ù–µ–≤–∞–∂–Ω–æ", callback_data=f"price_{brand}_{model}_{year}_{city}_all"))
    await callback.message.edit_text("–£–∫–∞–∂–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É:", reply_markup=kb)

# === –®–∞–≥ 6 ‚Äî —Å—Ç–∞—Ç—É—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ ===
@dp.callback_query_handler(lambda c: c.data.startswith("price_"))
async def select_status(callback: types.CallbackQuery):
    _, brand, model, year, city, price = callback.data.split("_", 5)
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("–¢–æ–ª—å–∫–æ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ", callback_data=f"status_{brand}_{model}_{year}_{city}_{price}_new"),
        InlineKeyboardButton("–í—Å–µ", callback_data=f"status_{brand}_{model}_{year}_{city}_{price}_all")
    )
    await callback.message.edit_text("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –∏–ª–∏ –≤—Å–µ?", reply_markup=kb)

# === –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ===
@dp.callback_query_handler(lambda c: c.data.startswith("status_"))
async def show_results(callback: types.CallbackQuery):
    _, brand, model, year, city, price, status = callback.data.split("_", 6)
    rows = sheet.get_all_records()
    found = 0
    for row in rows:
        if brand != "all" and row['–ú–∞—Ä–∫–∞'].lower() != brand.lower():
            continue
        if model != "all" and row['–ú–æ–¥–µ–ª—å'].lower() != model.lower():
            continue
        if year != "all" and str(row['–ì–æ–¥']).strip() != year:
            continue
        if city != "all" and row['–ì–æ—Ä–æ–¥'].lower() != city.lower():
            continue
        if price != "all":
            try:
                p = int(str(row['–¶–µ–Ω–∞']).replace(" ", "").replace("–º–ª–Ω", "").replace("—Å—É–º", "").strip())
                if p > int(price):
                    continue
            except:
                continue
        if status == "new" and row['–°—Ç–∞—Ç—É—Å'] == "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ":
            continue

        try:
            full_model = f"{row['–ú–∞—Ä–∫–∞']} {row['–ú–æ–¥–µ–ª—å']}"
            caption = f"üöó <b>{full_model}</b>\nüìç {row['–ì–æ—Ä–æ–¥']}\nüí∞ {row['–¶–µ–Ω–∞']}"
            photo = row['–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ'].split(",")[0]
            link = row.get("–°—Å—ã–ª–∫–∞ –Ω–∞ –±–∞–Ω–∫", "")
            phone = str(row.get("–¢–µ–ª–µ—Ñ–æ–Ω", "")).strip()
            tg = str(row.get("–¢–µ–ª–µ–≥—Ä–∞–º", "")).strip()

            buttons = []
            if link:
                buttons.append(InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏", url=link))
            if phone.startswith("+"):
                buttons.append(InlineKeyboardButton("üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å", url=f"https://t.me/share/url?url=tel:{phone}"))
            if tg:
                buttons.append(InlineKeyboardButton("üì© –ù–∞–ø–∏—Å–∞—Ç—å", url=f"https://t.me/{tg.strip('@')}"))

            kb = InlineKeyboardMarkup(row_width=2).add(*buttons)
            await bot.send_photo(chat_id=callback.message.chat.id, photo=photo, caption=caption, reply_markup=kb, parse_mode="HTML")
            found += 1
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
            continue

    if found == 0:
        await callback.message.reply("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")

# === –ö–æ–º–∞–Ω–¥–∞ /publish ===
@dp.message_handler(commands=['publish'])
async def publish_to_channel(message: types.Message):
    rows = sheet.get_all_records()
    count = 0

    for row in rows:
        if str(row.get("–°—Ç–∞—Ç—É—Å", "")).strip().lower() == "–≥–æ—Ç–æ–≤–æ":
            full_model = f"{row['–ú–∞—Ä–∫–∞']} {row['–ú–æ–¥–µ–ª—å']}"
            city = row.get("–ì–æ—Ä–æ–¥", "")
            price = row.get("–¶–µ–Ω–∞", "")
            photo = row.get("–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ", "").split(",")[0]
            phone = str(row.get("–¢–µ–ª–µ—Ñ–æ–Ω", "")).strip()
            tg = str(row.get("–¢–µ–ª–µ–≥—Ä–∞–º", "")).strip()
            link = row.get("–°—Å—ã–ª–∫–∞ –Ω–∞ –±–∞–Ω–∫", "")

            caption = f"üöó <b>{full_model}</b>\nüìç {city}\nüí∞ {price} –º–ª–Ω"

            buttons = []
            if link:
                buttons.append(InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏", url=link))
            if phone.startswith("+") or phone.startswith("998"):
                buttons.append(InlineKeyboardButton("üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å", url=f"https://t.me/share/url?url=tel:{phone}"))
            if tg:
                buttons.append(InlineKeyboardButton("‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å", url=f"https://t.me/{tg.lstrip('@')}"))

            keyboard = InlineKeyboardMarkup(row_width=2).add(*buttons)

            try:
                await bot.send_photo(chat_id=CHANNEL_USERNAME, photo=photo, caption=caption, parse_mode="HTML", reply_markup=keyboard)
                count += 1
            except Exception as e:
                await message.reply(f"‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

    await message.reply(f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ {count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª.")

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
